/*
var pg = require('pg'); 

var conString = "postgres://darin:fjrk99cl@172.17.17.3:5432/pvr",
    client = new pg.Client(conString);

//error handling omitted
pg.connect(conString, function(err, client) {
  client.query("SELECT NOW() as when", function(err, result) {
    console.log("Row count: %d",result.rows.length);  // 1
    console.log("Current year: %d", result.rows[0].when.getYear());
  });
});
{'cmd':'state','plc':'wellhouse','discrete':[{'tagname':'di0','value':false}]}
{'cmd':'state','plc':'wellhouse','discrete':[{'tagname':'di0','value':true}]}

var db = require('db_driver');
*/

var conf = require('ioserver_config'),
	_ = require('underscore.min');

function writeTagData(objArray){
	var plc = objArray['plc'],
		discretesToWrite,
		analogsToWrite;
    if (objArray.hasOwnProperty('discrete')){
		discretesToWrite = filterChangedData(plc,objArray['discrete']);
    }
	if (objArray.hasOwnProperty('analog')){
		analogsToWrite = filterChangedData(plc,objArray['analog']);
    }
	if (discretesToWrite && discretesToWrite.length > 0 || 
			analogsToWrite && analogsToWrite.length > 0){
		writeToDB({discretes:discretesToWrite,analogs:analogsToWrite});
	}
}

function writeToDB(obj){
	console.log(obj);
}
function filterChangedData(plc,state){
	var tagname,
		pt,
		val,
		changed = [],
		tags = conf.tagnames,
		points = conf.points[plc],
		now = new Date();

	_.each(state,function(el,i){
		pt = _.detect(points,function(aPt){ return aPt['point'] === el['tagname'];});
		tagname = pt['tagname'];
		if (tags[tagname]['value'] === null || tags[tagname]['value'] != el['value']){
			tags[tagname]['value'] = el['value'];
			tags[tagname]['lastUpdate'] = now;
			changed.push({'tagname':tagname,'value':tags[tagname]['value'],'lastUpdate':now});
		}
	});
	return changed;
	//console.log(changed);
}
exports.WriteTagData = writeTagData;
//exports.testObj = {'cmd':'state','plc':'wellhouse','discrete':[{'tagname':'di0','value':false}]};
